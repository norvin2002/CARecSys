testPredict_lr4 = predict(lr4, newdata = test_set, type = 'response')
p_class_testlr4 <- ifelse(testPredict_lr4 > 0.5, 1, 0) # as the train_set is balanced, we use 0.5 as treshold
p_class_factor_testlr4 <- factor(ifelse(testPredict_lr4 > 0.5, '1', '0'))
matrix_testlr4 <- table(test_set$targetloanstatus, p_class_testlr4)
matrix_testlr4
precision_testlr4 <- matrix_testlr4[2,2] / sum(matrix_testlr4[,2])
specificity_testlr4 <- matrix_testlr4[1,1] / sum(matrix_testlr4[1,])
accuracy_testlr4 <- sum(diag(matrix_testlr4))/sum(matrix_testlr4)
print(paste('Accuracy lr4:', accuracy_testlr4))
roc_testlr4 <- roc(test_set$targetloanstatus, p_class_testlr4)
recall_testlr4 <- matrix_testlr4[2,2] / sum(matrix_testlr4[2,])
print(paste('Recall lr4: ', recall_testlr4))
lr5 <- glm(targetloanstatus ~ term + emplength + homeownership + annualinc +
purpose + inqlast6mths + revolbal + intrate + revolutil,
data = train_set_smotet, family = binomial )
summary(lr5)
vif(lr5)
testPredict_lr5 <- predict(lr5, newdata = test_set, type = 'response')
p_class_testlr5 <- ifelse(testPredict_lr5 > 0.5, 1, 0)
matrix_testlr5 <- table(test_set$targetloanstatus, p_class_testlr5)
matrix_testlr5
precision_testlr5 <- matrix_testlr5[2,2] / sum(matrix_testlr5[,2])
specificity_testlr5 <- matrix_testlr5[1,1] / sum(matrix_testlr5[1,])
roc_testlr5 <- roc(test_set$targetloanstatus, testPredict_lr5)
recall_testlr5 <- matrix_testlr5[2,2]/sum(matrix_testlr5[2,])
print(paste('Recall lr5: ', recall_testlr5))
accuracy_testlr5 <- sum(diag(matrix_testlr5))/sum(matrix_testlr5)
print(paste('Accuracy lr5:', accuracy_testlr5))
tree1 <- rpart(targetloanstatus ~ loanamnt + term + installment + emplength+ homeownership + annualinc +
verificationstatus + purpose + dti + delinq2yrs + inqlast6mths + openacc +
revolbal + totalacc + intrate + revolutil, data = train_set_ROSEt, method = 'class',
minsplit = 5,
parms = list(split = "information"),
control=rpart.control(maxdepth=10,
usesurrogate=0,
maxsurrogate=0))
varImp(tree1)
tree3 <- rpart(targetloanstatus ~ term + annualinc +
purpose + inqlast6mths +
intrate + revolutil, data = train_set_ROSEt, method = 'class',
minsplit = 5,
parms = list(split = "information"),
control=rpart.control(maxdepth=10,
usesurrogate=0,
maxsurrogate=0))
varImp(tree3)
testPredict_tree3 <- predict(tree3, test_set, type = 'prob')
p_class_testtree3 <- ifelse(testPredict_tree3[,2] > 0.5, 1, 0)
matrix_testtree3 <- table(test_set$targetloanstatus, p_class_testtree3)
matrix_testtree3
accuracy_testtree3 <- sum(diag(matrix_testtree3))/sum(matrix_testtree3)
print(paste('Accuracy tree3: ',accuracy_testtree3))
precision_testtree3 <- matrix_testtree3[2,2] / sum(matrix_testtree3[,2])
specificity_testtree3 <- matrix_testtree3[1,1] / sum(matrix_testtree3[1,])
recall_testtree3 <- matrix_testtree3[2,2] / sum(matrix_testtree3[2,])
print(paste('Recall tree3', recall_testtree3))
roc_testtree3 <- roc(test_set$targetloanstatus, as.numeric(p_class_testtree3))
tree4 <-rpart(targetloanstatus ~ term + annualinc +
purpose + inqlast6mths +
intrate + revolutil, data = train_set_smotet, method = 'class',
minsplit = 5,
parms = list(split = "information"),
control=rpart.control(maxdepth=10,
usesurrogate=0,
maxsurrogate=0))
varImp(tree4)
testPredict_tree4 <- predict(tree4, test_set, type = 'prob')
p_class_testtree4 <- ifelse(testPredict_tree4[,2] > 0.5, 1, 0)
matrix_testtree4 <- table(test_set$targetloanstatus, p_class_testtree4)
matrix_testtree4
precision_testtree4 <- matrix_testtree4[2,2] / sum(matrix_testtree4[,2])
specificity_testtree4 <- matrix_testtree4[1,1] / sum(matrix_testtree4[1,])
accuracy_testtree4 <- sum(diag(matrix_testtree4))/sum(matrix_testtree4)
print(paste('Accuracy tree4:',accuracy_testtree4))
recall_testtree4 <- matrix_testtree4[2,2]/sum(matrix_testtree4[2,])
print(paste('Recall tree4:',recall_testtree4))
roc_testtree4 <- roc(test_set$targetloanstatus, as.numeric(p_class_testtree4))
rf1 <- randomForest(targetloanstatus ~ loanamnt + term + installment + emplength + homeownership + annualinc +
verificationstatus + purpose + dti + delinq2yrs + inqlast6mths + openacc +
revolbal + totalacc + intrate + revolutil,
data = train_set_ROSEt,
importance = TRUE,
ntree = 200)
varImp(rf1)
testPredict_rf1 <- predict(rf1, test_set, type = 'prob')
p_class_testrf1 <- ifelse(testPredict_rf1[,2] > 0.5, 1, 0)
matrix_testrf1 <- table(test_set$targetloanstatus, p_class_testrf1)
matrix_testrf1
recall_testrf1 <- matrix_testrf1[2,2] /sum(matrix_testrf1[2,])
print(paste('Recall rf1:', recall_testrf1))
precision_testrf1 <- matrix_testrf1[2,2] / sum(matrix_testrf1[,2])
specificity_testrf1 <- matrix_testrf1[1,1] / sum(matrix_testrf1[1,])
roc_testrf1 <- roc(response = test_set$targetloanstatus, predictor = as.numeric(p_class_testrf1))
accuracy_testrf1 <- sum(diag(matrix_testrf1))/sum(matrix_testrf1)
accuracy_testrf1
rf2 <- randomForest(targetloanstatus ~ loanamnt + term + installment + emplength + homeownership + annualinc +
verificationstatus + purpose + dti + delinq2yrs + inqlast6mths + openacc +
revolbal + totalacc + intrate + revolutil,
data = train_set_smotet,
importance = TRUE,
ntree = 200)
testPredict_rf2 <- predict(rf2, test_set, type = 'prob')
p_class_testrf2 <- ifelse(testPredict_rf2[,2] > 0.5, 1, 0)
matrix_testrf2= table(test_set$targetloanstatus, p_class_testrf2)
matrix_testrf2
precision_testrf2 <- matrix_testrf2[2,2] / sum(matrix_testrf2[,2])
specificity_testrf2 <- matrix_testrf2[1,1] / sum(matrix_testrf2[1,])
recall_testrf2 <- matrix_testrf2[2,2]/sum(matrix_testrf2[2,])
print(paste('Recall rf2:', recall_testrf2))
accuracy_testrf2 <- sum(diag(matrix_testrf2))/sum(matrix_testrf2)
print(paste('Accuracy rf2:', accuracy_testrf2))
roc_testrf2 <- roc(test_set$targetloanstatus, as.numeric(p_class_testrf2))
# define training control
train_control <- trainControl(method = "cv", number = 10)
# train the model on training set
lrcv2 <- train(targetloanstatus ~ term + emplength + homeownership + annualinc +
purpose + inqlast6mths + revolbal + intrate + revolutil ,
data = train_set_ROSE,
trControl = train_control,
method = "glm",
family=binomial())
# print cv scores
summary(lrcv2)
lrcv2$results
testPredict_lrcv2 <- predict(lrcv2, test_set, 'prob')
p_class_testlrcv2 <- ifelse(testPredict_lrcv2[,2] > 0.5, 1, 0)
matrix_testPredictlrcv2 <- table(test_set$targetloanstatus, p_class_testlrcv2)
matrix_testPredictlrcv2
precision_testlrcv2 <- matrix_testPredictlrcv2[2,2] / sum(matrix_testPredictlrcv2[,2])
specificity_testlrcv2 <- matrix_testPredictlrcv2[1,1] / sum(matrix_testPredictlrcv2[1,])
accuracy_testlrcv2 <- sum(diag(matrix_testPredictlrcv2))/sum(matrix_testPredictlrcv2)
print(paste('Accuracy lrcv2:', accuracy_testlrcv2))
recall_testlrcv2 <- matrix_testPredictlrcv2[2,2] / sum(matrix_testPredictlrcv2[2,])
print(paste('Recall lrcv2:', recall_testlrcv2))
roc_lrcv2 <- roc(test_set$targetloanstatus, as.numeric(p_class_testlrcv2))
# train the model on training set
lrcv3 <- train(targetloanstatus ~ term + emplength + homeownership + annualinc +
purpose + inqlast6mths + revolbal + intrate + revolutil ,
data = train_set_smote,
trControl = train_control,
method = "glm",
family=binomial())
# print cv scores
summary(lrcv3)
lrcv3$results
testPredict_lrcv3 <- predict(lrcv3, newdata = test_set, type = 'prob')
p_class_testlrcv3 <- as.numeric(ifelse(testPredict_lrcv3['1'] > 0.5, 1, 0))
matrix_testPredictlrcv3 <- table(test_set$targetloanstatus, p_class_testlrcv3)
matrix_testPredictlrcv3
precision_testlrcv3 <- matrix_testPredictlrcv3[2,2] / sum(matrix_testPredictlrcv3[,2])
specificity_testlrcv3 <- matrix_testPredictlrcv3[1,1] / sum(matrix_testPredictlrcv3[1,])
accuracy_testlrcv3 <- sum(diag(matrix_testPredictlrcv3))/sum(matrix_testPredictlrcv3)
print(paste('Accuracy lrcv3:', accuracy_testlrcv3))
recall_testlrcv3 <- matrix_testPredictlrcv3[2,2] / sum(matrix_testPredictlrcv3[2,])
print(paste('Recall lrcv3:', recall_testlrcv3))
roc_lrcv3 <- roc(test_set$targetloanstatus, as.numeric(p_class_testlrcv3))
plot(roc_testlr3, col = 'grey')
plot(roc_testlr4, add = TRUE, col = 'purple')
plot(roc_testlr5, add = TRUE, col = 'red')
plot(roc_testtree3, add = TRUE, col = 'green')
plot(roc_testtree4, add = TRUE, col = 'blue')
plot(roc_testrf1, add = TRUE, col = 'pink')
plot(roc_testrf2, add = TRUE, col = 'orange')
plot(roc_lrcv2, add = TRUE)
plot(roc_lrcv3, add = TRUE)
legend(x = "bottomright",
legend = c("LogisticReg","LogisticReg_ROSE", "LogisticReg_SMOTE", "DTree_ROSE", "DTree_SMOTE", 'RandomForest_ROSE', 'RandomForest_SMOTE', 'LogisticRegCV_ROSE', 'LogisticRegCV_SMOTE'), fill = 1:9)
performance <- data.frame('model' = c('Logistic Regression','Logistic Regression ROSE', 'Logistic Regression SMOTE', 'Tree ROSE', 'Tree SMOTE', 'Forest ROSE', 'Forest SMOTE', 'Logistic Regression ROSE CV', 'Logistic Regression SMOTE CV'),
'recall' = c(recall_testlr3, recall_testlr4, recall_testlr5, recall_testtree3, recall_testtree4, recall_testrf1, recall_testrf2, recall_testlrcv2, recall_testlrcv3),
'accuracy' = c(accuracy_testlr3, accuracy_testlr4, accuracy_testlr5, accuracy_testtree3, accuracy_testtree4, accuracy_testrf1, accuracy_testrf2, accuracy_testlrcv2, accuracy_testlrcv3))
print(performance)
test_set_result <- cbind(test_set[c('id','total_loan','targetloanstatus')],
'targetloanstatus_lr' = p_class_testlr3, 'targetloanstatus_lr_rose' = p_class_testlr4, 'targetloanstatus_lr_smote' = p_class_testlr5,
'targetloanstatus_tree_rose' = p_class_testtree3, 'targetloanstatus_tree_smote' = p_class_testtree4,
'targetloanstatus_rf_rose' = p_class_testrf1, 'targetloanstatus_rf_smote'= p_class_testrf2,
'targetloanstatus_lrcv_rose' = p_class_testlrcv2, 'targetloanstatus_lrcv_smote' = p_class_testlrcv3)
#(test_set_result)
FP_lr <- sum(test_set_result[which(test_set_result$targetloanstatus == 0 & test_set_result$targetloanstatus_lr == 1), 'total_loan'])
FN_lr <- sum(test_set_result[which(test_set_result$targetloanstatus == 1 & test_set_result$targetloanstatus_lr == 0), 'total_loan'])
FP_lr_rose <- sum(test_set_result[which(test_set_result$targetloanstatus == 0 & test_set_result$targetloanstatus_lr_rose == 1), 'total_loan'])
FN_lr_rose <- sum(test_set_result[which(test_set_result$targetloanstatus == 1 & test_set_result$targetloanstatus_lr_rose == 0), 'total_loan'])
FP_lr_smote <- sum(test_set_result[which(test_set_result$targetloanstatus == 0 & test_set_result$targetloanstatus_lr_smote == 1), 'total_loan'])
FN_lr_smote <- sum(test_set_result[which(test_set_result$targetloanstatus == 1 & test_set_result$targetloanstatus_lr_smote == 0), 'total_loan'])
FP_lrcv_smote <- sum(test_set_result[which(test_set_result$targetloanstatus == 0 & test_set_result$targetloanstatus_lrcv_smote == 1), 'total_loan'])
FN_lrcv_smote <- sum(test_set_result[which(test_set_result$targetloanstatus == 1 & test_set_result$targetloanstatus_lrcv_smote == 0), 'total_loan'])
FP_lrcv_rose <- sum(test_set_result[which(test_set_result$targetloanstatus == 0 & test_set_result$targetloanstatus_lrcv_rose == 1), 'total_loan'])
FN_lrcv_rose <- sum(test_set_result[which(test_set_result$targetloanstatus == 1 & test_set_result$targetloanstatus_lrcv_rose == 0), 'total_loan'])
FP_tree_rose <- sum(test_set_result[which(test_set_result$targetloanstatus == 0 & test_set_result$targetloanstatus_tree_rose == 1), 'total_loan'])
FN_tree_rose <- sum(test_set_result[which(test_set_result$targetloanstatus == 1 & test_set_result$targetloanstatus_tree_rose == 0), 'total_loan'])
FP_tree_smote <- sum(test_set_result[which(test_set_result$targetloanstatus == 0 & test_set_result$targetloanstatus_tree_smote == 1), 'total_loan'])
FN_tree_smote <- sum(test_set_result[which(test_set_result$targetloanstatus == 1 & test_set_result$targetloanstatus_tree_smote == 0), 'total_loan'])
FP_rf_rose <- sum(test_set_result[which(test_set_result$targetloanstatus == 0 & test_set_result$targetloanstatus_rf_rose == 1), 'total_loan'])
FN_rf_rose <- sum(test_set_result[which(test_set_result$targetloanstatus == 1 & test_set_result$targetloanstatus_rf_rose == 0), 'total_loan'])
FP_rf_smote <- sum(test_set_result[which(test_set_result$targetloanstatus == 0 & test_set_result$targetloanstatus_rf_smote == 1), 'total_loan'])
FN_rf_smote <- sum(test_set_result[which(test_set_result$targetloanstatus == 1 & test_set_result$targetloanstatus_rf_smote == 0), 'total_loan'])
no_mod <- sum(test_set_result[which(test_set_result$targetloanstatus == 1), 'total_loan'])
#print(paste('Cost of default without any model application: ', format(no_mod, big.mark=','), sep = ""))
cost <- data.frame('model' = c('Logistic Regression','Logistic Regression ROSE', 'Logistic Regression SMOTE', 'Tree ROSE', 'Tree SMOTE', 'Forest ROSE', 'Forest SMOTE', 'Logistic Regression ROSE CV', 'Logistic Regression SMOTE CV'),
'False Positive Cost' = c(FP_lr, FP_lr_rose, FP_lr_smote, FP_tree_rose, FP_tree_smote, FP_rf_rose, FP_rf_smote, FP_lrcv_rose, FP_lrcv_smote),
'False Negative Cost' = c(FN_lr, FN_lr_rose, FN_lr_smote, FN_tree_rose, FN_tree_smote, FN_rf_rose, FN_rf_smote, FN_lrcv_rose, FN_lrcv_smote)
)
cost <- cbind(cost, totalcost = rowSums(cost[,-1]))
cost.perf <- cbind(performance, cost[-1])
cost.perf$costdiffwithnomod <- cost.perf$totalcost - no_mod
#print(cost.perf[order(cost.perf$totalcost),])
knitr::kable(cost.perf[order(cost.perf$totalcost),])
FP_lr_count <- nrow(subset(test_set_result, test_set_result$targetloanstatus == 0 & test_set_result$targetloanstatus_lr == 1))
FN_lr_count <- nrow(subset(test_set_result, test_set_result$targetloanstatus == 1 & test_set_result$targetloanstatus_lr == 0))
FP_lr_rose_count <- nrow(subset(test_set_result, test_set_result$targetloanstatus == 0 & test_set_result$targetloanstatus_lr_rose == 1))
FN_lr_rose_count<- nrow(subset(test_set_result, test_set_result$targetloanstatus == 1 & test_set_result$targetloanstatus_lr_rose == 0))
FP_lr_smote_count <- nrow(subset(test_set_result, test_set_result$targetloanstatus == 0 & test_set_result$targetloanstatus_lr_smote == 1))
FN_lr_smote_count <- nrow(subset(test_set_result, test_set_result$targetloanstatus == 1 & test_set_result$targetloanstatus_lr_smote == 0))
FP_lrcv_rose_count <- nrow(subset(test_set_result, test_set_result$targetloanstatus == 0 & test_set_result$targetloanstatus_lrcv_rose == 1))
FN_lrcv_rose_count<- nrow(subset(test_set_result, test_set_result$targetloanstatus == 1 & test_set_result$targetloanstatus_lrcv_rose == 0))
FP_lrcv_smote_count <- nrow(subset(test_set_result, test_set_result$targetloanstatus == 0 & test_set_result$targetloanstatus_lrcv_smote == 1))
FN_lrcv_smote_count <- nrow(subset(test_set_result, test_set_result$targetloanstatus == 1 & test_set_result$targetloanstatus_lrcv_smote == 0))
FP_tree_rose_count <- nrow(subset(test_set_result, test_set_result$targetloanstatus == 0 & test_set_result$targetloanstatus_tree_rose == 1))
FN_tree_rose_count <- nrow(subset(test_set_result, test_set_result$targetloanstatus == 1 & test_set_result$targetloanstatus_tree_rose == 0))
FP_tree_smote_count <- nrow(subset(test_set_result, test_set_result$targetloanstatus == 0 & test_set_result$targetloanstatus_tree_smote == 1))
FN_tree_smote_count <- nrow(subset(test_set_result, test_set_result$targetloanstatus == 1 & test_set_result$targetloanstatus_tree_smote == 0))
FP_rf_rose_count <- nrow(subset(test_set_result, test_set_result$targetloanstatus == 0 & test_set_result$targetloanstatus_rf_rose == 1))
FN_rf_rose_count <- nrow(subset(test_set_result, test_set_result$targetloanstatus == 1 & test_set_result$targetloanstatus_rf_rose == 0))
FP_rf_smote_count <- nrow(subset(test_set_result, test_set_result$targetloanstatus == 0 & test_set_result$targetloanstatus_rf_smote == 1))
FN_rf_smote_count <- nrow(subset(test_set_result, test_set_result$targetloanstatus == 1 & test_set_result$targetloanstatus_rf_smote == 0))
cost2 <- data.frame('model' = c('Logistic Regression','Logistic Regression ROSE', 'Logistic Regression SMOTE',
'Tree ROSE', 'Tree SMOTE', 'Forest ROSE', 'Forest SMOTE', 'Logistic Regression CV ROSE',
'Logistic Regression CV SMOTE'),
'False Positive Count' = c(FP_lr_count, FP_lr_rose_count, FP_lr_smote_count,
FP_tree_rose_count, FP_tree_smote_count, FP_rf_rose_count,
FP_rf_smote_count, FP_lrcv_rose_count, FP_lrcv_smote_count),
'False Negative Count' = c(FN_lr_count, FN_lr_rose_count, FN_lr_smote_count, FN_tree_rose_count,
FN_tree_smote_count, FN_rf_rose_count, FN_rf_smote_count, FN_lrcv_rose_count,
FN_lrcv_smote_count)
)
cost.perf2 <- cbind(cost2, totalcost = cost2$False.Positive.Count * med_FP + cost2$False.Negative.Count * med_FN)
cost.perf2$costdiffwithnomod <- cost.perf2$totalcost - no_mod
knitr::kable(cost.perf2[order(cost.perf2$costdiffwithnomod),])
ori_FP = nrow(test_set[test_set$targetloanstatus == 0 & test_set$creditpolicy == 0,])/ nrow(test_set)
ori_FP
ori_FN <- nrow(test_set[test_set$targetloanstatus == 1 & test_set$creditpolicy == 1,]) / nrow(test_set)
ori_FN
FP_lr <- FP_lr_count / nrow(test_set)
FN_lr <- FN_lr_count / nrow(test_set)
FP_lr_rose <-FP_lr_rose_count / nrow(test_set)
FN_lr_rose <- FN_lr_rose_count / nrow(test_set)
FP_lr_smote <- FP_lr_smote_count / nrow(test_set)
FN_lr_smote <- FN_lr_smote_count / nrow(test_set)
FP_tree_rose <- FP_tree_rose_count /nrow(test_set)
FN_tree_rose <- FN_tree_rose_count /nrow(test_set)
FP_tree_smote <- FP_tree_smote_count / nrow(test_set)
FN_tree_smote <- FN_tree_smote_count / nrow(test_set)
FP_rf_rose <- FP_rf_rose_count / nrow(test_set)
FN_rf_rose <- FN_rf_rose_count / nrow(test_set)
FP_rf_smote <- FP_rf_smote_count / nrow(test_set)
FN_rf_smote <- FN_rf_smote_count / nrow(test_set)
comp <- data.frame('measure' = c('FP', 'FN'),
'without model' = c(ori_FP, ori_FN),
'base lr' = c(FP_lr, FN_lr),
'lr ROSE' = c(FP_lr_rose, FN_lr_rose),
'lr SMOTE' = c(FP_lr_smote, FN_lr_smote),
'tree ROSE' = c(FP_tree_rose, FN_tree_rose),
'tree SMOTE' = c(FP_tree_smote, FN_tree_smote),
'rf ROSE' = c(FP_rf_rose, FN_rf_rose),
'rf SMOTE' = c(FP_rf_smote, FN_rf_smote))
comp
comp1 <- subset(transform(comp, measure = c('FP', 'FN'),
diffbase = base.lr -without.model ,
difflr.rose = lr.ROSE - without.model ,
difflr.smote = lr.SMOTE - without.model,
difftree.rose = tree.ROSE - without.model,
difftree.smote = tree.SMOTE - without.model,
diffrf.rose = rf.ROSE - without.model,
diffrf.smote = rf.SMOTE - without.model),
select = c('measure','diffbase', 'difflr.rose', 'difflr.smote', 'difftree.rose',
'difftree.smote', 'diffrf.rose', 'diffrf.smote')
)
comp1 <- rbind(comp1[,-1], comp1[1,-1] * med_FP + comp1[2,-1] * med_FN)
comp1 <- cbind(measure = c('FP change', 'FN change', 'Expected Cost per Prediction'), comp1)
comp1 <- comp1 %>%
mutate_if(is.numeric, round, digits = 2)
print(comp1)
install.packages('rmarkdown')
install.packages('rmarkdown')
install.packages('knitr')
knitr::opts_chunk$set(echo = TRUE)
testPredictlr3 = predict(lr3, newdata = test_set, type = 'response')
perf = performance( testPredictlr3, "lift", "rpp" )
shiny::runApp('C:/Users/nchandra/OneDrive - National University of Singapore/Shiny')
rsconnect::deployApp()
runApp('C:/Users/nchandra/OneDrive - National University of Singapore/Shiny')
deployApp()
shiny::deployApp()
install.packages("RSQLite")
file.edit(file.path("~", ".Rprofile"))
pacman::p_load(tidyverse, tm, stringr,NLP, RColorBrewer, wordcloud, Matrix, recommenderlab, slam, data.table,
rARPACK, recosystem, ggplot2, textstem, arules, arulesViz)
setwd('C:/Users/nchandra/OneDrive - National University of Singapore/CARecSys')
df <- fread("./Data/amazon/Reviews.csv", sep = ",", header= TRUE)
tail(df)
str(df)
reviews <- as.data.frame(df)
head(reviews,3)
reviews$UserId[21700:21750] # noticed that some UserId start with #oc-
reviews$UserId <- str_replace_all(reviews$UserId, '#oc-', '' )
reviews$UserId[21700:21750] # check
# remove duplicated UsedId and ProductId
colnames(reviews)
reviews <- reviews[!duplicated(reviews[,c('ProductId','UserId')]),]; dim(reviews) #560,804 rows
# Select needed columns, ProductId, Id, UserId, ProfileName, Score, Summary, Text and count
reviews2 <- reviews[,c(1:4, 7, 9:10)]
head(reviews2)
# Review Count for each product
p_count <- reviews2 %>%
group_by(ProductId) %>%
summarize(count = n()) %>%
arrange(-count)
# merge p_count to reviews2
reviews2 <- merge(reviews2, p_count, by.x = 'ProductId', by.y = 'ProductId', all.x = TRUE)
head(reviews2)
#median count of product
median_count <- median(reviews2$count)
median_count
#only keep product with more than median reviews
review_final <- reviews2 %>%
filter(count >= median_count)
dim(review_final) # 284,194 rows
# Unique user
length(unique(review_final$UserId)) # 105,159 usersid
# Unique product
length(unique(review_final$ProductId)) #3,110 product id
# Most reviewed product
review_final %>%
group_by(ProductId) %>%
summarize(count = n()) %>%
arrange(-count) %>%
head()
# subset to 1st 50k data only for this project
review_final_small <- review_final[1:50000,]
head(review_final_small)
p_count <- review_final_small %>%
group_by(ProductId) %>%
summarize(count = n()) %>%
arrange(-count)
# check if products are having enough review
p_count; tail(p_count)
dim(review_final_small) # check, 50,000 rows
review_final_small$UserId <- as.factor(review_final_small$UserId)
review_final_small$ProductId <- as.factor(review_final_small$ProductId)
review_final_small$Score <- as.numeric(review_final_small$Score)
str(review_final_small)
# Mean score for each product
mean_score <- review_final_small %>%
group_by(ProductId) %>%
summarize(mean_score = mean(Score))
# merge mean_score to reviews
review_final_small <- merge(review_final_small, mean_score, by.x = 'ProductId', by.y = 'ProductId', all.x = TRUE)
head(review_final_small)
# combine summary for later use
reviews3 <- ungroup(review_final_small) %>%
group_by(ProductId) %>%
mutate(combine_summary = paste(Summary, collapse= ' '))
reviews3$combine_summary[1:2] # check
review_final_small$combine_summary = reviews3$combine_summary
rm(reviews3)
review_final_small$combine_summary[1:2] # check
# check lengths
length(unique(reviews3$combine_summary)) # 491 unique combine_summary
length(unique(reviews3$ProductId)) # 679 unique products
# this means that some products have the same combine_summary
# select only ProductId, UserId, Score
review_cf <- review_final_small[,c(3,1,5)]
### Content Based
review_cb <- review_final_small[,c('ProductId','combine_summary', 'count')]
review_cb[1:2, 1:2]
rm(reviews)
rm(reviews2)
rm(reviews3)
rm(review-final)
rm(review_cf)
rm(df)
rm(review_final)
rm(review_cb)
# remove duplicate, since we have already combine the summary
review_cb_gather <- review_cb[!duplicated(review_cb[,c('ProductId','combine_summary')]),]
# check lengths
length(unique(review_cb_gather$combine_summary)) # 491 unique combine_summary
length(unique(review_cb_gather$ProductId)) # 679 unique products
# this means that some products have the same combine_summary
#remove non-ASCII characters
review_cb_gather$combine_summary <- iconv(review_cb_gather$combine_summary, "UTF-8", "ASCII",sub='')
#Preprocessing the text...
corpus <- VCorpus(VectorSource(review_cb_gather$combine_summary))
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, removeWords, c(stopwords('english'), 'the', 'and', 'will', 'product'))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, stemDocument)
# corpus <- tm_map(corpus, lemmatize_strings)
corpus <- tm_map(corpus, removeWords, c(stopwords('english'), 'the', 'and', 'will', 'product'))
corpus <- tm_map(corpus, stripWhitespace)
# check
for(i in 1:5){
print(corpus[[i]][1])
}
#creating the matrix
dtm <- DocumentTermMatrix(corpus)
dtm_ti <- weightTfIdf(dtm)
dtm_ti
sim_mat_cos <- crossprod_simple_triplet_matrix(t(dtm_ti))/(sqrt(col_sums(t(dtm_ti)^2) %*% t(col_sums(t(dtm_ti)^2))))
result <- sort(sim_mat_cos[, 1], decreasing = T)[1:5] # reference product id on the first row
result # top 5 product id
### Content Based
review_cb <- review_final_small[,c('ProductId','combine_summary', 'count')]
review_cb[1:2, 1:2]
# remove duplicate, since we have already combine the summary
review_cb_gather <- review_cb[!duplicated(review_cb[,c('ProductId','combine_summary')]),]
# check lengths
length(unique(review_cb_gather$combine_summary)) # 491 unique combine_summary
length(unique(review_cb_gather$ProductId)) # 679 unique products
#remove non-ASCII characters
review_cb_gather$combine_summary <- iconv(review_cb_gather$combine_summary, "UTF-8", "ASCII",sub='')
#Preprocessing the text...
corpus <- VCorpus(VectorSource(review_cb_gather$combine_summary))
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, removeWords, c(stopwords('english'), 'the', 'and', 'will', 'product'))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, stemDocument)
# corpus <- tm_map(corpus, lemmatize_strings)
corpus <- tm_map(corpus, removeWords, c(stopwords('english'), 'the', 'and', 'will', 'product'))
corpus <- tm_map(corpus, stripWhitespace)
# check
for(i in 1:5){
print(corpus[[i]][1])
}
#creating the matrix
dtm <- DocumentTermMatrix(corpus)
dtm_ti <- weightTfIdf(dtm)
dtm_ti
sim_mat_cos <- crossprod_simple_triplet_matrix(t(dtm_ti))/(sqrt(col_sums(t(dtm_ti)^2) %*% t(col_sums(t(dtm_ti)^2))))
result <- sort(sim_mat_cos[, 1], decreasing = T)[1:5] # reference product id on the first row
result # top 5 product id
#get the index of the most similar product in 'result'
result_i <- as.integer(names(result))
head(result_i)
# create tags for the product
m1 <- as.matrix(dtm); dim(m1) # 679 rows, 6392 columns
# Obtain top 5 key words for each product
tag <- t(apply(m1, 1, FUN = function(x) colnames(m1)[order(-x)[1:5]]))
tag_unite <- unite(data.frame(tag), "tag", 1:5, sep = " ")
review_cb[1:2, 1:2]
class(review_cb)
head(review_cb)
head(review_cb_gather)
head(review_cb_gather,1)
review_cb_gather[review_cb_gather$combine_summary == '0006641040',]
nrow(review_cb_gather[review_cb_gather$combine_summary == '0006641040',])
nrow(review_cb_gather[review_cb_gather$ProductId == '0006641040',])
nrow(review_cb[review_cb$ProductId ==  '0006641040',])
class(sin_mat_cos)
sim_mat_cos <- crossprod_simple_triplet_matrix(t(dtm_ti))/(sqrt(col_sums(t(dtm_ti)^2) %*% t(col_sums(t(dtm_ti)^2))))
class(sin_mat_cos)
class(sim_mat_cos)
sim_mat_cos[1:5,1:5]
class(dtm)
dtm[1:5,1:5]
dtm[[1]]
dtm[[2]]
dtm[[3]]
dtm[[3]][1]
dtm[[3]][526]
colnames(sim_mat_cos)
rownames(sim_mat_cos)
review_cb_gather[order(review_cb_gather$ProductId),]
review_cb_gather <- review_cb_gather[order(review_cb_gather$ProductId),]
# check lengths
length(unique(review_cb_gather$combine_summary)) # 491 unique combine_summary
length(unique(review_cb_gather$ProductId)) # 679 unique products
rownames(sim_mat_cos) <- unique(review_cb_gather$ProductId)
result <- sort(sim_mat_cos[, 1], decreasing = T)[1:5] # reference product id on the first row
result # top 5 product id
colnames(sim_mat_cos) <- unique(review_cb_gather$ProductId)
result <- sort(sim_mat_cos[, 1], decreasing = T)[1:5] # reference product id on the first row
result <- sort(sim_mat_cos[, '0006641040'], decreasing = T)[1:5] # reference product id on the first row
result # top 5 product id
result <- sort(sim_mat_cos[, 'B00004RAMY'], decreasing = T)[1:5] # reference product id on the first row
result # top 5 product id
# how to present the proper form of the word, unstem
# probably need to add in more stop words
# need to change the input of the user
recProd(sim_mat_cos, 'B00004RAMY', 3)
recProd = function (simm, prod, k) {
found <- sort(simm[, prod], decreasing = T)[2:(k+1)]
print(found)
cat(paste0("Selected product: <title> ", review_cb_gather[prod, 1]))
cat("\nRecommended products:\n")
resindex <- as.integer(names(found))
print(resindex)
for (i in 1:k) {
cat(paste0("\n",i,"-", resindex[i], " <ProductId> ", review_cb_gather[resindex[i], 1], "\n<tags> ", tag_unite[result_i[i],]))
}
}
recProd(sim_mat_cos, 100, 3)
recProd(sim_mat_cos, 'B00004RAMY', 3)
gc()
dim(sim_mat_cos)
# prod 100, top 3
recProd(sim_mat_cos, 100, 3)
# how to present the proper form of the word, unstem
# probably need to add in more stop words
# need to change the input of the user
recProd(sim_mat_cos, 'B00004RAMY', 3)
